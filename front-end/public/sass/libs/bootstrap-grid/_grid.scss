// Grid system

// Container widths
//
// Set the container width and override it for fixed navbars in media queries.
.container {
  // Apply the mixin for a fixed-width container (defined elsewhere)
  @include container-fixed();

  // Override the container width for small screens (sm)
  @media (min-width: $screen-sm-min) {
    width: $container-sm;
  }

  // Override the container width for medium screens (md)
  @media (min-width: $screen-md-min) {
    width: $container-md;
  }

  // Override the container width for large screens (lg)
  @media (min-width: $screen-lg-min) {
    width: $container-lg;
  }
}

// Fluid container
//
// This container uses the same mixin as fixed-width containers but without any defined width for fluid, full-width layouts.
.container-fluid {
  @include container-fixed();
}

// Row
// A row is used to contain and clear the floats of columns.
.row {
  // Apply a mixin for creating a row with the appropriate properties (defined elsewhere)
  @include make-row();
}

// Columns
// Common styles for small and large grid columns
@include make-grid-columns();

// Extra small grid
// Columns, offsets, pushes, and pulls for extra small devices like smartphones.
@include make-grid(xs);

// Small grid
// Columns, offsets, pushes, and pulls for small devices (phones and tablets).
@media (min-width: $screen-sm-min) {
  @include make-grid(sm);
}

// Medium grid
// Columns, offsets, pushes, and pulls for the desktop device range.
@media (min-width: $screen-md-min) {
  @include make-grid(md);
}

// Large grid
// Columns, offsets, pushes, and pulls for large desktop devices.
@media (min-width: $screen-lg-min) {
  @include make-grid(lg);
}

// Responsive: Utility classes

// MS viewport hack for better mobile scaling support.
@-ms-viewport {
  width: device-width;
}

// Visibility utilities
// The visibility utilities are used to hide or show elements depending on the screen size.
// Note: These classes (.visible-xs, .visible-sm, .visible-md, .visible-lg) were deprecated in Bootstrap v3.2.0

// Mixin for displaying an element
@mixin responsive-visibility($parent) {
  #{$parent} {
    display: block !important;
  }

  // Ensuring correct table display
  table#{$parent}  { display: table; }
  tr#{$parent}     { display: table-row !important; }
  th#{$parent},
  td#{$parent}     { display: table-cell !important; }
}

// Mixin for hiding an element
@mixin responsive-invisibility($parent) {
  #{$parent} {
    display: none !important;
  }
}

// Apply the invisibility mixin for deprecated visibility classes
@include responsive-invisibility('.visible-xs, .visible-sm, .visible-md, .visible-lg');

// General visibility utility for various screen sizes
// These classes ensure that elements are only visible on their respective screen sizes

// Visibility on extra small devices (screen-xs)
@media (max-width: $screen-xs-max) {
  @include responsive-visibility('.visible-xs');
}

.visible-xs-block {
  @media (max-width: $screen-xs-max) {
    display: block !important;
  }
}
.visible-xs-inline {
  @media (max-width: $screen-xs-max) {
    display: inline !important;
  }
}
.visible-xs-inline-block {
  @media (max-width: $screen-xs-max) {
    display: inline-block !important;
  }
}

// Visibility on small devices (screen-sm)
@media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
  @include responsive-visibility('.visible-sm');
}

.visible-sm-block {
  @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
    display: block !important;
  }
}
.visible-sm-inline {
  @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
    display: inline !important;
  }
}
.visible-sm-inline-block {
  @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
    display: inline-block !important;
  }
}

// Visibility on medium devices (screen-md)
@media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
  @include responsive-visibility('.visible-md');
}

.visible-md-block {
  @media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
    display: block !important;
  }
}
.visible-md-inline {
  @media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
    display: inline !important;
  }
}
.visible-md-inline-block {
  @media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
    display: inline-block !important;
  }
}

// Visibility on large devices (screen-lg)
@media (min-width: $screen-lg-min) {
  @include responsive-visibility('.visible-lg');
}

.visible-lg-block {
  @media (min-width: $screen-lg-min) {
    display: block !important;
  }
}
.visible-lg-inline {
  @media (min-width: $screen-lg-min) {
    display: inline !important;
  }
}
.visible-lg-inline-block {
  @media (min-width: $screen-lg-min) {
    display: inline-block !important;
  }
}

// Hiding elements on different screen sizes
@media (max-width: $screen-xs-max) {
  @include responsive-invisibility('.hidden-xs');
}

@media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
  @include responsive-invisibility('.hidden-sm');
}

@media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
  @include responsive-invisibility('.hidden-md');
}

@media (min-width: $screen-lg-min) {
  @include responsive-invisibility('.hidden-lg');
}

// Print utilities
// These utility classes adjust the visibility of elements for printing. 
// Use them for print-specific layout changes.

// Mixin for hiding elements on print
@include responsive-invisibility('.visible-print');

// Ensure visibility for print layout
@media print {
  @include responsive-visibility('.visible-print');
}

.visible-print-block {
  display: none !important;

  @media print {
    display: block !important;
  }
}
.visible-print-inline {
  display: none !important;

  @media print {
    display: inline !important;
  }
}
.visible-print-inline-block {
  display: none !important;

  @media print {
    display: inline-block !important;
  }
}

// Hide elements on print layout
@media print {
  @include responsive-invisibility('.hidden-print');
}
